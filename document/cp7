# 7. 중단 및 종료

- 자바 언어에서는 특정 스레드를 명확하게 종료시킬 수 있는 방법은 없음.
- 자바 언어 에서 작업을 빠르고 안정적으로 멈추게 하는방법에 대해 설명

## 7.1 작업 중단

- 사용자가 취소하기를 요청한 경우 
- 시간이 제한된 작업
- 어플리케이션 이벤트
- 오류
- 어플리케이션 및 서비스 종료

### 7.1.1 인터럽트

- 인터럽트 요청 후 해당 쓰레드가 인터럽트 요청을 인지 하고 상황을 봐서 스스로 멈춰주기를 요청하는 방법임....
- 작업 취소 기능 구현에는 인터럽트가 가장 적절한 방법이라 볼수 있음.
- 인터럽트 요청에 대한 처리는 스레드에서 알아서 처리해야 함.
   (요청이 일어났다는것만 알뿐 이후에 어떤 작업을 해야하는지는 안알랴줌)

### 7.1.2 인터럽트 정책

- 스레드는 위 7.1.1 처럼 인터럽트 요청에 대한 정책을 보유해야 함.
- 각 스레드는 각자의 인터럽트 정책을 가지고 있으므로 해당 스레드에서 인터럽트 요청을 받았을 때 어떻게 동작할지를 정확하게 알고 있지 않은 경우 인터럽트를 걸면 안됨.

### 7.1.3 인터럽트에 대한 대응

- 일반적인 경우 인터럽트에 대해서 씹어서는 안됨.(인터럽트 발생 시 뭐라도 해야함.....)

### 7.1.4 예제:시간지정실행

- 임시로 빌려 사용하는 스레드에 인터럽트를 걸면 위험함.

### 7.1.5 Future를 사용해 작업 중단

- 작업실행전용 스레드에 인터럽트 거는 방법 : 예제 7.9
- Future 사용 : 예제 7.10

### 7.1.6 인터럽트에 응답하지 않는 블로킹 작업 다루기

- java.io 패키지의 동기적 소켓 I/O
- java.nio 패키지의 동기적 소켓 I/O
- Selector를 사용한 비동기적 I/O
- 락 확보

### 7.1.7 newTaskFor 메소드로 비표준적인 중단 방법 처리

- ThreadPoolExecutor.newTaskFor : 표준을 따르지 않는 중단방법을 표준 범주내에서 사용할 수 있도록 함.

## 7.2 스레드 기반 서비스 중단

- 스레드 기반 서비스를 생성한 메소드보다 생성된 스레드 기반 서비스가 오래 실행될 수 있는 상황일 경우, 스레드 기반 서비스에서는 항상 종료시키는 방법을 제공해야 함.
 -> 해당 책에서는 프로듀스 - 컨슈머 패턴이라 칭함

### 7.2.1 예제:로그 서비스

### 7.2.2 ExecutorService 종료

- 프로듀스 - 컨슈머 패턴 중단시 사용방법 1

### 7.2.3 독약(poison pill)
 
- 프로듀스 - 컨슈머 패턴 중단시 사용방법 2
- 종료에 대한 정보(독약 객체)를 큐에 적재하여 컨슈머가 인식하도록 만듬. -> 컨슈머는 독약 객체 인지 후 자체 종료 실행 필요

### 7.2.4 예제 : 단번에 실행하는 서비스

- 내부적으로 사용하는 Executor를 생성 및 사용하여 종료될때까지 대기하는 서비스

### 7.2.5 shutdownNow 메소드의 약점

- 시작은 했지만 아직 완료되지 않은 작업 목록을 획득할 방법이 없음
- TrackingExecutor : 시작 후 완료되지 않은 작업목록 획득할 수 있음. -> 이거 써서 종료 시점에 적재하여 중단된 작업을 나중에 처리할 수 있도록 하라

## 7.3 비정상적인 스레드 종료 상황 처리

- 아무일도 일어나지 않을 수도 있지만 심각한 일이 발생할 수 있음
- 스레드가 피치못할 사정으로 종료되는 경우에도 외부에 종료된다는 사실을 알려 프로그램의 다른부분에서 대응이 가능하도록 해야함.

### 7.3.1 정의되지 않은 예외 처리

- UncaughtExceptionHandler를 이용해 보완 처리 가능함.

## 7.4 JVM 종료

- 예정된 절차대로 종료 or 예기치 못한 임의 종료

### 7.4.1 종료 훅

- 서비스별로 각자 종료훅을 만들어 등록하는 방법 보다 통합 종료 훅을 사용하는것이 좋음

### 7.4.2 데몬 스레드

- JVM 종료에 영향을 주지 않는 스레드
(JVM 종료 시 데몬스레드가 떠있던 말던 종료함- 부수적인 기능을 수행하는 스레드에 용이함)

### 7.4.3 finalize 메소드

- finalize메소드는 구현 및 성능상 이슈가 발생할 수 있으므로 try/catch 및 close메소드 호출로 처리하고 finalize메소드는 가급적 사용하지 마라
